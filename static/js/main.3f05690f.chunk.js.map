{"version":3,"sources":["AddItemForms.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForms","props","useState","error","setError","newItemTitle","setNewItemTitle","addTask","trim","addItem","className","value","onChange","e","currentTarget","onKeyPress","key","onClick","EditableSpan","title","setTitle","editMode","setEditMode","activeViewMode","autoFocus","onBlur","onDoubleClick","Todolist","newTitle","onChangeTodolistTitle","id","removeTodolist","tasks","map","task","isDone","type","checked","changeTaskStatus","changeTaskTitle","deleteTask","filter","filterTasks","App","todolistID1","v1","todolistID2","todolists","setTodolists","tasksObj","setTasksObj","todolistID","t","newId","tl","todolist","changeStatus","taskId","titleForNewTodolist","IDForNewTodolist","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3f05690f.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormsPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForms = (props: AddItemFormsPropsType) => {\r\n\r\n    const [error, setError] = useState<string | null>(null)\r\n    const [newItemTitle, setNewItemTitle] = useState<string>('')\r\n\r\n    const addTask = () => {\r\n        if (newItemTitle.trim() !== '') {\r\n            props.addItem(newItemTitle.trim())\r\n            setNewItemTitle('')\r\n        } else setError('Error')\r\n    }\r\n    const onClickButtonHandler = () => {\r\n        addTask()\r\n    }\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewItemTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressInputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        e.key === 'Enter' && addTask()\r\n    }\r\n\r\n    return <div>\r\n        <input className={error ? 'error' : ''}\r\n               value={newItemTitle}\r\n               onChange={onChangeInputHandler}\r\n               onKeyPress={onKeyPressInputHandler}\r\n\r\n        />\r\n        <button onClick={onClickButtonHandler}>+</button>\r\n        {error && <div className={'error-message'}>{error}</div>}\r\n    </div>\r\n\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n\r\n    let [title, setTitle] = useState<string>('')\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activeViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressEnter = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === 'Enter' && activeViewMode()\r\n\r\n\r\n    return editMode ?\r\n        <input autoFocus\r\n               value={title}\r\n               onBlur={activeViewMode}\r\n               onKeyPress={onKeyPressEnter}\r\n               onChange={onChangeTitleHandler}/> :\r\n        <span onDoubleClick={activeEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterType} from './App';\r\nimport {AddItemForms} from './AddItemForms';\r\nimport {EditableSpan} from './EditableSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n    tasks: Array<TaskType>\r\n    removeTodolist: (todolistID: string) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    deleteTask: (todolistID: string, newId: string) => void\r\n    filterTasks: (todolistID: string, value: FilterType) => void\r\n    onChangeTodolistTitle: (todolistID: string, newTitle: string) => void\r\n    changeTaskTitle: (todolistID: string, taskId: string, newTitle: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(props.id, title)\r\n    }\r\n    const onClickAllButtonHandler = () => {\r\n        props.filterTasks(props.id, 'All')\r\n    }\r\n    const onClickActiveButtonHandler = () => {\r\n        props.filterTasks(props.id, 'Active')\r\n    }\r\n    const onClickCompletedButtonHandler = () => {\r\n        props.filterTasks(props.id, 'Completed')\r\n    }\r\n    const onChangeTodolistTitleHandler = (newTitle: string) => {\r\n        props.onChangeTodolistTitle(props.id, newTitle)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} onChange={onChangeTodolistTitleHandler}/>\r\n            <button onClick={removeTodolist}>X</button>\r\n        </h3>\r\n        <AddItemForms addItem={addTask}/>\r\n        <ul>\r\n            {props.tasks.map(task => {\r\n\r\n                const onClickXButtonHandler = () => {\r\n                    props.deleteTask(props.id, task.id)\r\n                }\r\n                const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeTaskStatus(props.id, task.id, e.currentTarget.checked)\r\n                }\r\n                const onChangeTitleHandler = (newTitle: string) => {\r\n                    props.changeTaskTitle(props.id, task.id, newTitle)\r\n                }\r\n\r\n                return (\r\n                    <li key={task.id}\r\n                        className={task.isDone ? 'is-done' : ''}>\r\n                        <input type=\"checkbox\"\r\n                               checked={task.isDone}\r\n                               onChange={onChangeStatusHandler}/>\r\n\r\n                        <EditableSpan title={task.title} onChange={onChangeTitleHandler}/>\r\n                        <button onClick={onClickXButtonHandler}>X</button>\r\n                    </li>)\r\n            })}\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'All' ? 'activ-filter' : ''}\r\n                    onClick={onClickAllButtonHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'Active' ? 'activ-filter' : ''}\r\n                    onClick={onClickActiveButtonHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'Completed' ? 'activ-filter' : ''}\r\n                    onClick={onClickCompletedButtonHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForms} from './AddItemForms';\r\n\r\nexport type FilterType = 'All' | 'Active' | 'Completed'\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    let todolistID1 = v1()\r\n    let todolistID2 = v1()\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'All'},\r\n        {id: todolistID2, title: 'What to byu', filter: 'All'}\r\n    ])\r\n\r\n    const [tasksObj, setTasksObj] = useState<TasksStateType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'ReactJS', isDone: false}],\r\n        [todolistID2]: [\r\n            {id: v1(), title: 'Book', isDone: true},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Sugar', isDone: false}]\r\n    })\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(t => t.id !== todolistID))\r\n        delete tasksObj[todolistID]\r\n        setTasksObj({...tasksObj})\r\n    }\r\n    const addTodolist = (titleForNewTodolist: string) => {\r\n        let IDForNewTodolist = v1()\r\n        let newTodolist: TodolistType = {\r\n            id: IDForNewTodolist,\r\n            title: titleForNewTodolist,\r\n            filter: 'All'\r\n        }\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasksObj({...tasksObj, [IDForNewTodolist]: []})\r\n    }\r\n    const addTask = (todolistID: string, title: string) => {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        setTasksObj({...tasksObj, [todolistID]: [task, ...tasksObj[todolistID]]})\r\n    }\r\n    const deleteTask = (todolistID: string, newId: string) => {\r\n        setTasksObj({\r\n            ...tasksObj, [todolistID]: tasksObj[todolistID].filter(\r\n                t => t.id !== newId\r\n            )\r\n        })\r\n    }\r\n    const filterTasks = (todolistID: string, value: FilterType) => {\r\n        setTodolists(todolists.map(tl => tl.id === todolistID ? {...tl, filter: value} : tl))\r\n    }\r\n    const onChangeTodolistTitle = (todolistID: string, newTitle: string) => {\r\n        setTodolists(todolists.map(todolist => todolist.id === todolistID ? {...todolist, title: newTitle} : todolist))\r\n    }\r\n    const changeStatus = (todolistID: string, taskId: string, isDone: boolean) => {\r\n        setTasksObj({\r\n            ...tasksObj, [todolistID]: tasksObj[todolistID].map(\r\n                t => t.id === taskId ? {...t, isDone: isDone} : t)\r\n        })\r\n    }\r\n    const changeTaskTitle = (todolistID: string, taskId: string, newTitle: string) => {\r\n        setTasksObj({\r\n            ...tasksObj, [todolistID]: tasksObj[todolistID].map(\r\n                t => t.id === taskId ? {...t, title: newTitle} : t)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForms addItem={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    let filteredTasks\r\n                    tl.filter === 'Active' ? filteredTasks = tasksObj[tl.id].filter(t => !t.isDone) :\r\n                        tl.filter === 'Completed' ? filteredTasks = tasksObj[tl.id].filter(t => t.isDone) :\r\n                            filteredTasks = tasksObj[tl.id]\r\n                    return (\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            filter={tl.filter}\r\n                            tasks={filteredTasks}\r\n                            addTask={addTask}\r\n                            deleteTask={deleteTask}\r\n                            filterTasks={filterTasks}\r\n                            changeTaskStatus={changeStatus}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            onChangeTodolistTitle={onChangeTodolistTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}